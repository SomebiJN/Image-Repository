{"version":3,"sources":["displays/Gallery.js","Alert.js","displays/Upload.js","App.js","reportWebVitals.js","index.js"],"names":["Gallery","useState","imageIds","setImageIds","loadImages","a","fetch","res","json","data","console","error","useEffect","className","map","imageId","index","cloudName","publicId","width","crop","Alert","msg","type","display","setdisplay","setInterval","Upload","InputState","setInputState","ImageSource","setImageSource","selectedImg","setSelectedImg","successMessage","setSuccessMessage","errorMessage","setErrorMessage","previewImage","file","reader","FileReader","readAsDataURL","onloadend","result","ImageUpload","EncodedImage","method","body","JSON","stringify","headers","onSubmit","e","preventDefault","onerror","placeholder","value","onChange","target","files","src","alt","style","height","App","to","path","exact","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iOAGe,SAASA,IAAU,IAAD,EACGC,qBADH,mBACtBC,EADsB,KACZC,EADY,KAEvBC,EAAU,uCAAG,8BAAAC,EAAA,+EAEOC,MAAM,eAFb,cAELC,EAFK,gBAGQA,EAAIC,OAHZ,OAGLC,EAHK,OAIXN,EAAYM,GAJD,kDAMXC,QAAQC,MAAR,MANW,0DAAH,qDAahB,OAHAC,qBAAU,WACNR,MACD,IAEC,gCACI,oBAAIS,UAAU,QAAd,yBACA,qBAAKA,UAAU,UAAf,SACKX,GACGA,EAASY,KAAI,SAACC,EAASC,GAAV,OACT,cAAC,QAAD,CAEIC,UAAW,OACXC,SAAUH,EACVI,MAAM,MACNC,KAAK,SAJAJ,WCvBlB,SAASK,EAAT,GAA+B,IAAdC,EAAa,EAAbA,IAAKC,EAAQ,EAARA,KAAQ,EAEXtB,oBAAS,GAFE,mBAElCuB,EAFkC,KAEzBC,EAFyB,KAYzC,OARAb,qBAAU,WACFU,IACAG,GAAW,GACXC,aAAY,WACRD,GAAW,KACZ,QAER,CAACH,IACG,mCAAGE,GAAW,qBAAKX,UAAS,sBAAiBU,GAA/B,SAAwCD,MCXlD,SAASK,IAAU,IAAD,EACO1B,mBAAS,IADhB,mBACtB2B,EADsB,KACVC,EADU,OAEQ5B,mBAAS,IAFjB,mBAEtB6B,EAFsB,KAEVC,EAFU,OAGS9B,mBAAS,IAHlB,mBAGtB+B,EAHsB,KAGTC,EAHS,OAIehC,mBAAS,IAJxB,mBAItBiC,EAJsB,KAINC,EAJM,OAKWlC,mBAAS,IALpB,mBAKtBmC,EALsB,KAKRC,EALQ,KAcvBC,EAAe,SAACC,GAClB,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,cAAcH,GACrBC,EAAOG,UAAY,WACfZ,EAAeS,EAAOI,UAoBxBC,EAAW,uCAAG,WAAMC,GAAN,SAAAzC,EAAA,+EAGNC,MAAM,cACZ,CACIyC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAAEzC,KAAMqC,IAC7BK,QAAS,CAAE,eAAiB,sBAPpB,OASZtB,EAAc,IACdE,EAAe,IACfI,EAAkB,6BAXN,gDAaZzB,QAAQC,MAAR,MACA0B,EAAgB,iBAdJ,yDAAH,sDAkBjB,OACI,gCACI,oBAAIxB,UAAU,QAAd,6BACA,cAACQ,EAAD,CAAOC,IAAKc,EAAcb,KAAK,WAC/B,cAACF,EAAD,CAAOC,IAAKY,EAAgBX,KAAK,YACjC,uBAAMV,UAAU,OAAOuC,SAvCX,SAACC,GAEjB,GADAA,EAAEC,iBACCtB,EAAH,CACI,IAAMQ,EAAS,IAAIC,WACnBD,EAAOE,cAAcV,GACrBQ,EAAOG,UAAY,WACfE,EAAYL,EAAOI,SAEvBJ,EAAOe,QAAU,WACb7C,QAAQC,MAAM,mBACd0B,EAAgB,sBA6BpB,UACI,uBACId,KAAK,OACLiC,YAAY,kBACZC,MAAS7B,EACT8B,SA3DS,SAACL,GACtB,IAAMd,EAAOc,EAAEM,OAAOC,MAAM,GAC5BtB,EAAaC,GACbN,EAAeM,GACfV,EAAcwB,EAAEM,OAAOF,UAwDf,wBAAQ5C,UAAU,MAAMU,KAAK,SAA7B,uBAKHO,GACG,qBACI+B,IAAK/B,EACLgC,IAAI,SACJC,MAAO,CAAEC,OAAQ,cCrDtBC,MApBf,WACE,OACE,qBAAKpD,UAAU,MAAf,SACE,eAAC,IAAD,WACI,qBAAKA,UAAU,MAAf,SAEE,qBAAIA,UAAU,YAAd,UACE,oBAAIA,UAAU,WAAd,SAAyB,cAAC,IAAD,CAAMqD,GAAG,UAAT,sBACzB,oBAAIrD,UAAW,WAAf,SAA0B,cAAC,IAAD,CAAMqD,GAAG,IAAT,4BAGhC,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWrE,IACjC,cAAC,IAAD,CAAOmE,KAAK,UAAUE,UAAW1C,aCP5B2C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.44fd41bc.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport {Image} from 'cloudinary-react';\r\n\r\nexport default function Gallery(){\r\n    const [imageIds, setImageIds] = useState();\r\n    const loadImages = async () => {\r\n        try {\r\n            const res = await fetch('/api/images');\r\n            const data = await res.json();\r\n            setImageIds(data);\r\n        } catch (err) {\r\n            console.error(err);\r\n        }\r\n    };\r\n    //ensure image is loaded once\r\n    useEffect(() => {\r\n        loadImages();\r\n    }, []);\r\n    return (\r\n        <div>\r\n            <h1 className='title'>Your Images</h1>\r\n            <div className=\"gallery\">\r\n                {imageIds &&\r\n                    imageIds.map((imageId, index) => (\r\n                        <Image\r\n                            key={index}\r\n                            cloudName= 'soms'\r\n                            publicId={imageId}\r\n                            width=\"300\"\r\n                            crop=\"scale\"\r\n                        />\r\n                    ))}\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React, { useState, useEffect } from 'react';\r\n\r\nexport default function Alert({ msg, type }) {\r\n    //declare new state variable and initialize it's state to false\r\n    const [display, setdisplay] = useState(false);\r\n    //to be run after every render, the effect is passed to it\r\n    useEffect(() => {\r\n        if (msg) {\r\n            setdisplay(true);\r\n            setInterval(() => {\r\n                setdisplay(false);\r\n            }, 2000); //set display to false every 2 seconds\r\n        }\r\n    }, [msg]); //only re-run if msg changes\r\n    return <>{display && <div className={`alert alert-${type}`}>{msg}</div>}</>;\r\n}\r\n","import React, { useState } from 'react';\r\nimport Alert from '../Alert';\r\n\r\nexport default function Upload() {\r\n    const [InputState, setInputState] = useState('');\r\n    const [ImageSource,setImageSource] = useState('');\r\n    const [selectedImg, setSelectedImg] = useState('');\r\n    const [successMessage, setSuccessMessage] = useState('');\r\n    const [errorMessage, setErrorMessage] = useState('');\r\n\r\n    const ChangeInputImage = (e) => {\r\n        const file = e.target.files[0]; \r\n        previewImage(file);\r\n        setSelectedImg(file);\r\n        setInputState(e.target.value);\r\n    };\r\n\r\n    const previewImage = (file) => {\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(file);\r\n        reader.onloadend = () => {\r\n            setImageSource(reader.result);\r\n        };\r\n    };\r\n\r\n    const ImageSubmit = (e) =>{\r\n        e.preventDefault();\r\n        if(selectedImg ){\r\n            const reader = new FileReader();\r\n            reader.readAsDataURL(selectedImg);\r\n            reader.onloadend = () => {\r\n                ImageUpload(reader.result);\r\n            };\r\n            reader.onerror = () => {\r\n                console.error('file read error');\r\n                setErrorMessage('FILE READ ERROR');\r\n            };\r\n        }\r\n        else return;\r\n    };\r\n\r\n    const ImageUpload = async(EncodedImage) => {\r\n        try{\r\n            //make an API request to Cloudinary\r\n            await fetch('/api/upload',\r\n            {\r\n                method: 'POST',\r\n                body: JSON.stringify({ data: EncodedImage}),\r\n                headers: { 'Content-Type' : 'application/json'}\r\n            });\r\n            setInputState('');\r\n            setImageSource('');\r\n            setSuccessMessage('View image in the gallery');\r\n        } catch (error){\r\n            console.error(error);\r\n            setErrorMessage('Upload issues');\r\n        }\r\n    };\r\n\r\n    return ( \r\n        <div>\r\n            <h1 className=\"title\">Upload an Image</h1>\r\n            <Alert msg={errorMessage} type='danger'/>\r\n            <Alert msg={successMessage} type='success'/>\r\n            <form className='form' onSubmit = {ImageSubmit}>\r\n                <input \r\n                    type=\"file\" \r\n                    placeholder=\"Select an image\"\r\n                    value = {InputState}\r\n                    onChange={ChangeInputImage}/>\r\n                <button className=\"btn\" type=\"submit\" >\r\n                    Submit\r\n                </button>\r\n            </form>\r\n            \r\n            {ImageSource && (\r\n                <img\r\n                    src={ImageSource}\r\n                    alt=\"chosen\"\r\n                    style={{ height: '300px' }}\r\n                />\r\n            )}\r\n        </div>\r\n    );   \r\n}","import React from 'react';\nimport './App.css';\nimport {BrowserRouter as Router, Route, Link, Switch} from 'react-router-dom';\nimport Gallery from './displays/Gallery.js';\nimport Upload from './displays/Upload.js';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Router>\n          <nav className='nav'>\n            \n            <ul className='nav-items'>\n              <li className='nav-item'><Link to='/upload'>Upload</Link></li>\n              <li className ='nav-item'><Link to='/'>Gallery</Link></li>\n            </ul>\n          </nav>\n        <Switch>\n          <Route path='/' exact component={Gallery} />\n          <Route path='/upload' component={Upload} />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}